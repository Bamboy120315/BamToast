<resources>
    <string name="app_name">BamToast</string>

    <string name="explain">
        BamToast：\n
        ┏━━━━━━━━━━━━━━━━━\n
        ┃名词介绍：\n
        ┃\n
        ┃BToast：\n
        ┃本人之前写的自定义Toast，\n
        ┃与原生Toast一样可以全局显示。\n
        ┃\n
        ┃EToast：\n
        ┃网上一个大神写的，\n
        ┃可以在没有通知权限的情况下弹出的Toast。\n
        ┃\n
        ┃BamToast：\n
        ┃EToast + BToast。\n
        ┃根据当前通知权限状态自动选择，\n
        ┃如果当前有通知权限就用BToast，\n
        ┃没有就使用EToast。\n
        ┗━━━━━━━━━━━━━━━━━\n
        \n
        正常Toast在用户关闭了通知权限后就无法弹出了，\n
        BamToast解决了这个问题，\n
        方案采用网上的EToast + BToast。\n
        \n
        实现很简单，\n
        判断通知权限，\n
        如果有通知权限，\n
        就正常使用BToast，\n
        离开Activity也可以全局显示，\n
        否则使用EToast，\n
        保障用户能够看到Toast。\n
        \n
        至于EToast在未打开通知权限也能弹出的原理，\n
        其实很简单，\n
        通知权限未获取时，\n
        Toast其实还是正常绘制的，\n
        只是由于权限问题无法显示而已，\n
        EToast则是通过getView()，\n
        获取了绘制但未显示的Toast，\n
        然后将其在Activity中显示出来。\n
        \n
        那么和原本的Toast有什么区别呢？\n
        \n
        1、原生Toast在显示和退出时有渐变动画，\n
        EToast没有，\n
        所以视觉上稍稍欠佳，\n
        不过没事，\n
        BamToast的图标是有动画的，\n
        一定程度上有所弥补。\n
        \n
        2、原生的Toast是系统级的，\n
        所以Activity离开也能正常显示，\n
        而EToast是基于Activity的，\n
        所以若Activity离开，\n
        Toast也会随之离开。\n
        \n
        3、因为EToast是基于Activity的，\n
        所以必须要使用本类的Context,\n
        不能使用getApplicationContext()，\n
        切记！\n
    </string>
</resources>
